apiVersion: v1
kind: Template
labels:
  app: ${APPLICATION_NAME}
metadata:
  name: ${APPLICATION_NAME}-build-pipeline-template
  annotations:
    description: A template for creating the build cicd pipeline for ${APPLICATION_NAME}.
  creationTimestamp: null
objects:
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: ${APPLICATION_NAME}-build
  spec:
    runPolicy: SerialLatestOnly
    strategy:
      type: JenkinsPipeline
      jenkinsPipelineStrategy:
        jenkinsfile: |
          pipeline {
            agent {
              label 'maven'
            }
            stages {

              stage('Display environment variables') {
                steps {
                  script {
                    openshift.withProject() {
                      sh """
                        set
                        echo "APPLICATION_NAME is ${APPLICATION_NAME}"
                        echo "SOURCE_REPO_GIT_URI is ${SOURCE_REPO_GIT_URI}"
                        echo "SOURCE_REPO_GIT_BRANCH is ${SOURCE_REPO_GIT_BRANCH}"
                        echo "IMAGE_REGISTRY_NAMESPACE is ${IMAGE_REGISTRY_NAMESPACE}"
                        echo "CICD_RESOURCES_DIRECTORY is ${CICD_RESOURCES_DIRECTORY}"
                      """
                    }
                  }
                }
              }

              stage('Checkout source repo') {
                steps {
                  script {
                    openshift.withProject() {
                      dir("$WORKSPACE/application-repo") {
                        git url: "${SOURCE_REPO_GIT_URI}",
                            branch: "${SOURCE_REPO_GIT_BRANCH}"
                        MVN_ARTIFACT_ID = readMavenPom().getArtifactId()
                        MVN_VERSION = readMavenPom().getVersion()
                        echo "MVN_ARTIFACT_ID is ${MVN_ARTIFACT_ID}"
                        echo "MVN_VERSION is ${MVN_VERSION}"
                      }
                    }
                  }
                }
              }

              stage('mvn clean package') {
                steps {
                  dir("$WORKSPACE/application-repo") {
                    sh """
                      mvn clean package
                    """
                  }
                }
              }

              stage('Create image-build ImageStream ${APPLICATION_NAME} in namespace ${IMAGE_REGISTRY_NAMESPACE}') {
                steps {
                  dir("$WORKSPACE/application-repo") {
                    sh """
                      oc process --filename ${CICD_RESOURCES_DIRECTORY}/build-imagestream-template.yaml --param=APPLICATION_NAME=${APPLICATION_NAME} | oc apply --namespace ${IMAGE_REGISTRY_NAMESPACE} --filename -
                    """
                  }
                }
              }

              stage('Create image-build BuildConfig ${APPLICATION_NAME} in namespace ${IMAGE_REGISTRY_NAMESPACE}') {
                steps {
                  dir("$WORKSPACE/application-repo") {
                    sh """
                      oc process --filename ${CICD_RESOURCES_DIRECTORY}/build-buildconfig-template.yaml --param=APPLICATION_NAME=${APPLICATION_NAME} --param=GIT_COMMIT_ID=${GIT_COMMIT_ID} --param=MVN_VERSION=${MVN_VERSION} --param=BUILD_DTTM=${BUILD_DTTM} | oc apply --namespace ${IMAGE_REGISTRY_NAMESPACE} --filename -
                    """
                  }
                }
              }

              stage('Build image') {
                steps {
                  sh """
                    oc start-build ${APPLICATION_NAME} --namespace ${IMAGE_REGISTRY_NAMESPACE} --from-file=application-repo/target/${MVN_ARTIFACT_ID}-${MVN_VERSION}.jar --follow
                  """
                }
              }

              stage('Tag image with VERSION_...') {
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject("${IMAGE_REGISTRY_NAMESPACE}") {
                        echo "Tag image with VERSION_${MVN_VERSION}_${BUILD_DTTM}"
                        openshift.tag("${APPLICATION_NAME}:latest", "${APPLICATION_NAME}:VERSION_${MVN_VERSION}_${BUILD_DTTM}")
                      }
                    }
                  }
                }
              }

              stage('Pipeline complete') {
                steps{
                  script {
                    echo "Pipeline completed!"
                  }
                }
              }

            }
          }
    triggers: []
parameters:
- name: APPLICATION_NAME
  displayName: Application Name
  description: The name of the application (i.e. Openshift Application name).
  required: true
- name: SOURCE_REPO_GIT_URI
  displayName: URI of the source repository
  description: URI of the source repository.
  required: true
- name: SOURCE_REPO_GIT_BRANCH
  displayName: Branch of the source repository
  description: Branch of the source repository.
  required: true
- name: IMAGE_REGISTRY_NAMESPACE
  displayName: Namespace that the application image is to placed in
  description: Namespace that the application image is to placed in.
  required: true
- name: CICD_RESOURCES_DIRECTORY
  displayName: Name of directory where the openshift scripts and yaml files are
  description: Name of directory where the openshift scripts and yaml files are.
  required: true
